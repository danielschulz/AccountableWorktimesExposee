datesMap[[key1]] = NA
datesMap[["key1"]] = NA
datesMap
# SETUP WORKSPACE
set.seed(4711)
PERSISTENT_CONSTANTS = c("PERSISTENT_CONSTANTS", "VORGANG_PATTERN", "DATE_PATTERN",
"DATES_TO_IGNORE",
"datesMap", "weekdaysMap", "kumMap", "bausteinMap", "vorgangMap")
VORGANG_PATTERN = "^(\\d+(\\.\\d+)+)\\.*"
DATE_PATTERN = "^(\\d+\\.\\d+\\.\\d+)$"
DATES_TO_IGNORE = c("kum:", ">>>>")
# install.packages("stringr")
library("stringr")
# clean
rm(list = ls()[!(ls() %in% PERSISTENT_CONSTANTS)])
# constants
PERSISTENT_CONSTANTS = c("PERSISTENT_CONSTANTS")
# INIT DATA
# load trainings data: data
dataLocation = "..\\inputs\\worktimes-example.txt"
rawData = read.csv2(dataLocation, header=FALSE, encoding="ANSI", sep="\t",
strip.white=TRUE, na.strings=c("?"))
rm(list=c("dataLocation"))
rawData = as.data.frame(rawData)
names(rawData) = c("date", "weekday", "nominal", "timespan", "fragPause", "fragActual",
"baustein", "vorgang", "description")
curDate = NA
curNominal = NA
curWeekday = NA
# MAPS: dates, weekdays, kum, baustein, vorgang
datesMap = list()
weekdaysMap = list()
kumMap = list()
bausteinMap = list()
vorgangMap = list()
rawUniqueDates = unique(rawData$date)
uniqueDates = rawUniqueDates[!rawUniqueDates %in% DATES_TO_IGNORE]
regExpVorgang = regexpr(VORGANG_PATTERN, rawData$vorgang)
regExpDate = regexpr(DATE_PATTERN, rawData$date)
View(rawData)
for (c in rawData$vorgang) {
c
}
for (c in rawData$vorgang) {
return c;
}
for (c in rawData$vorgang) {
return c
}
for (c in rawData$vorgang) {
"c"
}
for (i in 1:length(rawData$vorgang)) {
rawData$date = "1"
}
View(rawData)
rawData[,2]$date
rawData[2,]$date
rawData[3,]$date
rawData[3,]$vorgang
rawData[4,]$vorgang
rawData[5,]$vorgang
rawData[6,]$vorgang
rawData[1,]$vorgang
rawData[11,]$vorgang
regexpr(DATE_PATTERN, "1.12.2011 rawData[i,]$date")
regexpr(DATE_PATTERN, "1.12.2011")
for (i in 1:length(rawData$vorgang)) {
if (TRUE == regexpr(DATE_PATTERN, rawData[i,]$date)) {
curDate = as.POSIXct.Date(rawData[i,]$date)
}
}
for (i in 1:length(rawData$vorgang)) {
if (TRUE == regexpr(DATE_PATTERN, rawData[i,]$date)) {
curDate = as.POSIXct.Date(rawData[i,]$date)
}
}
# SETUP WORKSPACE
set.seed(4711)
PERSISTENT_CONSTANTS = c("PERSISTENT_CONSTANTS", "VORGANG_PATTERN", "DATE_PATTERN",
"DATES_TO_IGNORE",
"datesMap", "weekdaysMap", "kumMap", "bausteinMap", "vorgangMap")
VORGANG_PATTERN = "^(\\d+(\\.\\d+)+)\\.*"
DATE_PATTERN = "(\\d+\\.\\d+\\.\\d+)"
DATES_TO_IGNORE = c("kum:", ">>>>")
# install.packages("stringr")
library("stringr")
# clean
rm(list = ls()[!(ls() %in% PERSISTENT_CONSTANTS)])
# constants
PERSISTENT_CONSTANTS = c("PERSISTENT_CONSTANTS")
# INIT DATA
# load trainings data: data
dataLocation = "..\\inputs\\worktimes-example.txt"
rawData = read.csv2(dataLocation, header=FALSE, encoding="ANSI", sep="\t",
strip.white=TRUE, na.strings=c("?"))
rm(list=c("dataLocation"))
rawData = as.data.frame(rawData)
names(rawData) = c("date", "weekday", "nominal", "timespan", "fragPause", "fragActual",
"baustein", "vorgang", "description")
curDate = NA
curNominal = NA
curWeekday = NA
# MAPS: dates, weekdays, kum, baustein, vorgang
datesMap = list()
weekdaysMap = list()
kumMap = list()
bausteinMap = list()
vorgangMap = list()
for (i in 1:length(rawData$vorgang)) {
if (TRUE == regexpr(DATE_PATTERN, rawData[i,]$date)) {
curDate = as.POSIXct.Date(rawData[i,]$date)
}
}
curDate
View(rawData)
rm(list=c("dataLocation"))
rm(list = ls()[!(ls() %in% PERSISTENT_CONSTANTS)])
# SETUP WORKSPACE
set.seed(4711)
PERSISTENT_CONSTANTS = c("PERSISTENT_CONSTANTS", "VORGANG_PATTERN", "DATE_PATTERN",
"DATES_TO_IGNORE",
"datesMap", "weekdaysMap", "kumMap", "bausteinMap", "vorgangMap")
VORGANG_PATTERN = "^(\\d+(\\.\\d+)+)\\.*"
DATE_PATTERN = "^(\\d+\\.\\d+\\.\\d+)$"
DATES_TO_IGNORE = c("kum:", ">>>>")
# install.packages("stringr")
library("stringr")
# clean
rm(list = ls()[!(ls() %in% PERSISTENT_CONSTANTS)])
# constants
PERSISTENT_CONSTANTS = c("PERSISTENT_CONSTANTS")
# INIT DATA
# load trainings data: data
dataLocation = "..\\inputs\\worktimes-example.txt"
rawData = read.csv2(dataLocation, header=FALSE, encoding="ANSI", sep="\t",
strip.white=TRUE, na.strings=c("?"))
rm(list=c("dataLocation"))
rawData = as.data.frame(rawData)
names(rawData) = c("date", "weekday", "nominal", "timespan", "fragPause", "fragActual",
"baustein", "vorgang", "description")
curDate = NA
curNominal = NA
curWeekday = NA
# MAPS: dates, weekdays, kum, baustein, vorgang
datesMap = list()
weekdaysMap = list()
kumMap = list()
bausteinMap = list()
vorgangMap = list()
for (i in 1:length(rawData$vorgang)) {
if (TRUE == regexpr(DATE_PATTERN, rawData[i,]$date)) {
curDate = as.POSIXct.Date(rawData[i,]$date)
}
}
rawUniqueDates = unique(rawData$date)
uniqueDates = rawUniqueDates[!rawUniqueDates %in% DATES_TO_IGNORE]
regExpVorgang = regexpr(VORGANG_PATTERN, rawData$vorgang)
regExpDate = regexpr(DATE_PATTERN, rawData$date)
fix(curDate)
curDate
# SETUP WORKSPACE
set.seed(4711)
PERSISTENT_CONSTANTS = c("PERSISTENT_CONSTANTS", "VORGANG_PATTERN", "DATE_PATTERN",
"DATES_TO_IGNORE", "DATE_KUM_ROW",
"datesMap", "weekdaysMap", "kumMap", "bausteinMap", "vorgangMap")
VORGANG_PATTERN = "^(\\d+(\\.\\d+)+)\\.*"
DATE_PATTERN = "^(\\d+\\.\\d+\\.\\d+)$"
DATE_KUM_ROW = "kum:"
DATES_TO_IGNORE = c(DATE_KUM_ROW, ">>>>")
# install.packages("stringr")
library("stringr")
# clean
rm(list = ls()[!(ls() %in% PERSISTENT_CONSTANTS)])
# constants
PERSISTENT_CONSTANTS = c("PERSISTENT_CONSTANTS")
# INIT DATA
# load trainings data: data
dataLocation = "..\\inputs\\worktimes-example.txt"
rawData = read.csv2(dataLocation, header=FALSE, encoding="ANSI", sep="\t",
strip.white=TRUE, na.strings=c("?"))
rm(list=c("dataLocation"))
rawData = as.data.frame(rawData)
names(rawData) = c("date", "weekday", "nominal", "timespan", "fragPause", "fragActual",
"baustein", "vorgang", "description")
curDate = NA
curNominal = NA
curWeekday = NA
# MAPS: dates, weekdays, kum, baustein, vorgang
datesMap = list()
weekdaysMap = list()
kumMap = list()
bausteinMap = list()
vorgangMap = list()
for (i in 1:length(rawData$vorgang)) {
if (TRUE == regexpr(DATE_PATTERN, rawData[i,]$date)) {
curDate = as.POSIXct.Date(rawData[i,]$date)
}
}
rawUniqueDates = unique(rawData$date)
uniqueDates = rawUniqueDates[!rawUniqueDates %in% DATES_TO_IGNORE]
regExpVorgang = regexpr(VORGANG_PATTERN, rawData$vorgang)
regExpDate = regexpr(DATE_PATTERN, rawData$date)
curDate
as.Date("1.12.11" ,format='%d.%M.%Y')
as.Date("1.12.2011" ,format='%d.%M.%Y')
as.Date("1.11.2011" ,format='%d.%M.%Y')
as.Date("11.11.2011" ,format='%d.%M.%Y')
as.Date("11.11.2011", format='%d.%M.%Y')
as.Date("11.11.2011", format='%d.%m.%Y')
as.Date("1.12.2011", format='%d.%m.%Y')
as.Date("1.12.11", format='%d.%m.%Y')
as.Date("1.12.11", format='%d.%m.%y')
as.Date("1.12.11", format='%d.%m.%y')
source('D:/Dev/Code/msg/GB_L/AWT/AccountableWorktimesExposee/scripts/loadDataFrame.R', echo=TRUE)
curDate
View(rawData)
View(rawData)
source('D:/Dev/Code/msg/GB_L/AWT/AccountableWorktimesExposee/scripts/loadDataFrame.R', echo=TRUE)
kumMap
curDate
kumMap
dim(kumMap)
length(kumMap)
kumMap[[1]]
kumMap[[curDate]]
paste0(curDate, "..")
paste0(curDate, "")
source('D:/Dev/Code/msg/GB_L/AWT/AccountableWorktimesExposee/scripts/loadDataFrame.R', echo=TRUE)
kumMap
View(rawData)
View(rawData)
source('D:/Dev/Code/msg/GB_L/AWT/AccountableWorktimesExposee/scripts/loadDataFrame.R', echo=TRUE)
kumMap
source('D:/Dev/Code/msg/GB_L/AWT/AccountableWorktimesExposee/scripts/loadDataFrame.R', echo=TRUE)
source('D:/Dev/Code/msg/GB_L/AWT/AccountableWorktimesExposee/scripts/loadDataFrame.R', echo=TRUE)
kumMap
length(kumMap)
sd(kumMap)
sd(kumMap[1])
kumMap[1]
kumMap[2]
kumMap[1]
kumMap[1][1]
kumMap[1][2]
kumMap[[1]]
kumMap[[2]]
sd(kumMap[[2]])
sum(kumMap[[2]])
kumMap[[2]]
curDate
as.Date(curDate, format="%Y")
as.Date(curDate, format="%m")
format(curDate, "%m")
format(curDate, "%y")
format(curDate, "%Y")
source('D:/Dev/Code/msg/GB_L/AWT/AccountableWorktimesExposee/scripts/loadDataFrame.R', echo=TRUE)
View(rawData)
source('D:/Dev/Code/msg/GB_L/AWT/AccountableWorktimesExposee/scripts/loadDataFrame.R', echo=TRUE)
source('D:/Dev/Code/msg/GB_L/AWT/AccountableWorktimesExposee/scripts/loadDataFrame.R', echo=TRUE)
View(rawData)
View(rawData)
source('D:/Dev/Code/msg/GB_L/AWT/AccountableWorktimesExposee/scripts/loadDataFrame.R', echo=TRUE)
View(rawData)
source('D:/Dev/Code/msg/GB_L/AWT/AccountableWorktimesExposee/scripts/loadDataFrame.R', echo=TRUE)
View(rawData)
View(rawData)
source('D:/Dev/Code/msg/GB_L/AWT/AccountableWorktimesExposee/scripts/loadDataFrame.R', echo=TRUE)
View(rawData)
source('D:/Dev/Code/msg/GB_L/AWT/AccountableWorktimesExposee/scripts/loadDataFrame.R', echo=TRUE)
View(rawData)
source('D:/Dev/Code/msg/GB_L/AWT/AccountableWorktimesExposee/scripts/loadDataFrame.R', echo=TRUE)
View(rawData)
source('D:/Dev/Code/msg/GB_L/AWT/AccountableWorktimesExposee/scripts/loadDataFrame.R', echo=TRUE)
source('D:/Dev/Code/msg/GB_L/AWT/AccountableWorktimesExposee/scripts/loadDataFrame.R', echo=TRUE)
View(rawData)
kum = data.frame()
kum = data.frame(c("aa", "bb"))
kum
source('D:/Dev/Code/msg/GB_L/AWT/AccountableWorktimesExposee/scripts/loadDataFrame.R', echo=TRUE)
subset(rawData, rawData == DATE_KUM_ROW)
subset(rawData, rawData == DATE_KUM_ROW)$fragActual
kum = data.frame()
kum$fragPause = subset(rawData, rawData == DATE_KUM_ROW)$fragPause
kum$fragActual = subset(rawData, rawData == DATE_KUM_ROW)$fragActual
kum = data.frame(fragPause = subset(rawData, rawData == DATE_KUM_ROW)$fragPause,
fragActual = subset(rawData, rawData == DATE_KUM_ROW)$fragActual)
View(kum)
View(rawData)
View(kum)
View(rawData)
source('D:/Dev/Code/msg/GB_L/AWT/AccountableWorktimesExposee/scripts/loadDataFrame.R', echo=TRUE)
source('D:/Dev/Code/msg/GB_L/AWT/AccountableWorktimesExposee/scripts/loadDataFrame.R', echo=TRUE)
View(kum)
View(rawData)
source('D:/Dev/Code/msg/GB_L/AWT/AccountableWorktimesExposee/scripts/loadDataFrame.R', echo=TRUE)
View(kum)
source('D:/Dev/Code/msg/GB_L/AWT/AccountableWorktimesExposee/scripts/loadDataFrame.R', echo=TRUE)
View(kum)
sd(kumm$fragP)
sd(kum$fragPause)
sum(kum$fragPause)
View(kum)
isNa(NA)
is.na(NA)
rm(list = ls()[!(ls() %in% PERSISTENT_CONSTANTS)])
source('D:/Dev/Code/msg/GB_L/AWT/AccountableWorktimesExposee/scripts/loadDataFrame.R', echo=TRUE)
sum(kum$fragPause)
sum(kum$fragActual)
sd(kum$fragActual)
sum(kum$fragActual) / length(kum$fragActual)
boxplot(kum$fragActual ~ kum$weekday)
df = data.frame(date=c("2012-02-01", "2012-02-01", "2012-02-02"))
df$day <- weekdays(as.Date(df$date))
View(df)
View(df)
kum = data.frame(
weekday = weekdays(subset(rawData, rawData == DATE_KUM_ROW)$weekday),
fragPause = subset(rawData, rawData == DATE_KUM_ROW)$fragPause,
fragActual = subset(rawData, rawData == DATE_KUM_ROW)$fragActual)
kum = data.frame(
weekday = weekdays(as.Date(subset(rawData, rawData == DATE_KUM_ROW)$weekday)),
fragPause = subset(rawData, rawData == DATE_KUM_ROW)$fragPause,
fragActual = subset(rawData, rawData == DATE_KUM_ROW)$fragActual)
weekdays(as.Date(subset(rawData, rawData == DATE_KUM_ROW)$weekday))
subset(rawData, rawData == DATE_KUM_ROW)$weekday
kum = data.frame(
weekday = weekdays(as.Date(subset(rawData, rawData == DATE_KUM_ROW)$date)),
fragPause = subset(rawData, rawData == DATE_KUM_ROW)$fragPause,
fragActual = subset(rawData, rawData == DATE_KUM_ROW)$fragActual)
subset(rawData, rawData == DATE_KUM_ROW)$date
View(rawData)
rawData$isKum = DATE_KUM_ROW == rawData$date
View(rawData)
source('D:/Dev/Code/msg/GB_L/AWT/AccountableWorktimesExposee/scripts/loadDataFrame.R', echo=TRUE)
kum = data.frame(
weekday = weekdays(as.Date(subset(rawData, rawData == DATE_KUM_ROW)$date)),
fragPause = subset(rawData, rawData$isKum)$fragPause,
fragActual = subset(rawData, rawData$isKum)$fragActual)
kum = data.frame(
weekday = weekdays(as.Date(subset(rawData, rawData$isKum)$date)),
fragPause = subset(rawData, rawData$isKum)$fragPause,
fragActual = subset(rawData, rawData$isKum)$fragActual)
subset(rawData, rawData$isKum)$date
weekdays(as.Date(subset(rawData, rawData$isKum)$date))
kum = data.frame(
weekday = weekdays(subset(rawData, rawData$isKum)$date),
fragPause = subset(rawData, rawData$isKum)$fragPause,
fragActual = subset(rawData, rawData$isKum)$fragActual)
weekdays(subset(rawData, rawData$isKum)$date)
subset(rawData, rawData$isKum)$date
rawData$date
rawData[,50]$date
rawData[,5]$date
rawData[4,]$date
weekdays(rawData[4,]$date)
weekdays(as.Date(rawData[4,]$date))
weekdays(as.Date(rawData[4,]$date, format=DATE_FORMAT))
kum = data.frame(
weekday = weekdays(as.Date(subset(rawData, rawData$isKum)$date, format=DATE_FORMAT)),
fragPause = subset(rawData, rawData$isKum)$fragPause,
fragActual = subset(rawData, rawData$isKum)$fragActual)
View(kum)
boxplot(kum$fragActual ~ kum$weekday)
unique(rawData$vorgang)
accounts = data.frame(
vorgang = unique(rawData$vorgang),
times = NA)
accounts = data.frame(
vorgang = unique(rawData$vorgang),
times = NA)
for (v in accounts) {
accounts$actual = sum(subset(rawData, rawData$vorgang == v)$fragActual)
}
View(accounts)
accounts = data.frame(
vorgang = unique(rawData$vorgang),
actual = NA)
for (v in accounts) {
accounts$actual = sum(subset(rawData, rawData$vorgang == v)$fragActual)
}
sum(rawData$fragActual)
sum(na.omit(rawData$fragActual))
accounts = data.frame(
vorgang = unique(rawData$vorgang),
actual = NA)
for (v in accounts) {
accounts$actual = sum(na.omit(subset(rawData, rawData$vorgang == v)$fragActual))
}
View(accounts)
for (i in 1:length(accounts$vorgang)) {
accounts$actual = sum(na.omit(subset(rawData, rawData$vorgang == v)$fragActual))
}
View(accounts)
for (i in 1:length(accounts$vorgang)) {
accounts$actual = sum(na.omit(rawData[i,]$fragActual))
}
View(accounts)
accounts = data.frame(
vorgang = unique(rawData$vorgang),
actual = NA)
for (i in 1:length(accounts$vorgang)) {
accounts[i,]$actual = sum(na.omit(rawData[i,]$fragActual))
}
View(accounts)
for (i in 1:length(accounts$vorgang)) {
accounts[i,]$actual = sum(na.omit(subset(rawData, accounts[i,]$vorgang == rawData$vorgang)))
}
accounts = data.frame(
vorgang = unique(rawData$vorgang),
actual = NA)
for (i in 1:length(accounts$vorgang)) {
accounts[i,]$actual = sum(na.omit(subset(rawData, accounts[i,]$vorgang == rawData$vorgang)))
}
View(accounts)
View(accounts)
accounts[26,]
accounts[26,]$vorgang
subset(rawData, accounts[26,]$vorgang)
subset(rawData, accounts[26,]$vorgang == rawData$vorgang)
sum(subset(rawData, accounts[26,]$vorgang == rawData$vorgang))
sum(subset(rawData, accounts[26,]$vorgang == rawData$vorgang)$fragActual)
accounts = data.frame(
vorgang = unique(rawData$vorgang),
actual = NA)
for (i in 1:length(accounts$vorgang)) {
accounts[i,]$actual = sum(na.omit(subset(rawData, accounts[i,]$vorgang == rawData$vorgang)$fragActual))
}
View(accounts)
sum(accounts$actual)
sum(accounts$actual) / 5046.79
rawData = subset(rawData, !rawData$isKum)
# kum
kum = data.frame(
weekday = weekdays(as.Date(subset(rawData, rawData$isKum)$date, format=DATE_FORMAT)),
fragPause = subset(rawData, rawData$isKum)$fragPause,
fragActual = subset(rawData, rawData$isKum)$fragActual)
# accounts
accounts = data.frame(
vorgang = unique(rawData$vorgang),
actual = NA)
for (i in 1:length(accounts$vorgang)) {
accounts[i,]$actual = sum(na.omit(subset(rawData, accounts[i,]$vorgang == rawData$vorgang)$fragActual))
}
View(accounts)
sum(accounts$actual)
accounts$rank = rank(accounts$actual)
View(accounts)
? rank
order(accounts$actual)
rank(accounts$actual)
accounts$rank = order(accounts$actual)
View(accounts)
accounts$rank = rank(accounts$actual, ties.method="max")
View(accounts)
length(accounts)
length(accounts$vorgang)
dim(accounts)
dim(accounts)[1]
accounts$rank = dim(accounts)[1] - rank(accounts$actual, ties.method="max")
View(accounts)
hist(accounts$actual)
quantile(accounts$actual)
? quantile(accounts$actual, )
quantile(accounts$actual, probs = seq(0, 1, 0.1))
max(accounts$actual)
subset(accounts, accounts$actual == max(accounts$actual))
accounts$rank = dim(accounts)[1] - rank(accounts$actual, ties.method="max") + 1
View(accounts)
sum(accounts$actual)
sum(accounts$actual) / (((12 * 2) + 3.5) * 22 * 8)
22*8
rawData
format(as.Date("1.12.11", DATE_FORMAT), "%m")
data = subset(rawData, !rawData$isKum)
data$month = format(as.Date(data$date, DATE_FORMAT), "%m")
View(data)
data$weekday = as.Date(data$date, DATE_FORMAT)
View(data)
data = subset(rawData, !rawData$isKum)
data$weekday = weekdays(as.Date(data$date, DATE_FORMAT))
data$month =   format(as.Date(data$date, DATE_FORMAT), "%m")
View(data)
data$weekday = weekdays(as.Date(data$date, DATE_FORMAT))
data$day   =   format(as.Date(data$date, DATE_FORMAT), "%d")
data$month =   format(as.Date(data$date, DATE_FORMAT), "%m")
data$year  =   format(as.Date(data$date, DATE_FORMAT), "%Y")
View(data)
View(subset(data, data$year == 2014))
data = subset(rawData, !rawData$isKum)
data$weekday = weekdays(as.Date(data$date, DATE_FORMAT))
data$day   =   format(as.Date(data$date, DATE_FORMAT), "%d")
data$month =   format(as.Date(data$date, DATE_FORMAT), "%m")
data$year  =   format(as.Date(data$date, DATE_FORMAT), "%Y")
View(data)
View(subset(data, data$year == 2014))
source('D:/Dev/Code/msg/GB_L/AWT/AccountableWorktimesExposee/scripts/loadDataFrame.R', echo=TRUE)
subset(data, data$weekday = "Donnerstag")
subset(data, data$weekday == "Donnerstag")
View(subset(data, data$weekday == "Donnerstag"))
sum(subset(data, data$weekday == "Samstag")$actual)
sum(subset(data, data$weekday == "Sonntag")$actual)
uniques(subset(data, data$weekday == "Sonntag")$actual)
unique(subset(data, data$weekday == "Sonntag")$actual)
unique(subset(data, data$weekday == "Sonntag")$fragActual)
sum(na.omit(subset(data, data$weekday == "Sonntag")$fragActual))
sum(na.omit(subset(data, data$weekday == "Samstag")$fragActual))
sum(na.omit(subset(data, data$weekday == "Montag")$fragActual))
sum(na.omit(subset(data, data$year == 2013)$fragActual))
sum(na.omit(subset(data, data$year == 2013)$fragActual))  / 1600
176*12
172*12
